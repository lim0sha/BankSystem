package Application.Abstractions.Repositories;

import Application.Contracts.ResultTypes.UserResult;
import Application.Models.Entites.User;

/**
 * Репозиторий для управления операциями с пользователями.
 * Использует паттерн CRUD (Create, Read, Update, Delete) для добавления, поиска, обновления и удаления пользователей.
 */
public interface IUserRepository {

    /**
     * Добавляет нового пользователя в хранилище данных.
     *
     * @param user объект пользователя, который необходимо добавить.
     * @return результат операции добавления пользователя, может содержать сообщение об ошибке или подтверждение успеха.
     */
    UserResult AddUser(User user);

    /**
     * Ищет пользователя в хранилище данных по его идентификатору.
     *
     * @param id идентификатор пользователя, которого нужно найти.
     * @return найденный объект пользователя, если он существует; {@code null}, если пользователь не найден.
     */
    User FindUserById(Integer id);

    /**
     * Обновляет информацию о существующем пользователе в хранилище данных.
     *
     * @param id идентификатор пользователя, чьи данные нужно обновить.
     * @param userUpdate объект с обновленными данными пользователя.
     * @return результат операции обновления пользователя, может содержать сообщение об ошибке или подтверждение успеха.
     */
    UserResult UpdateUser(Integer id, User userUpdate);

    /**
     * Удаляет пользователя из хранилища данных по его идентификатору.
     *
     * @param id идентификатор пользователя, которого нужно удалить.
     * @return результат операции удаления пользователя, может содержать сообщение об ошибке или подтверждение успеха.
     */
    UserResult DeleteUser(Integer id);
}
