package Presentation.Console;

import Application.Contracts.ResultTypes.BankAccountResult;
import Application.Contracts.ResultTypes.OperationResult;
import Application.Contracts.ResultTypes.UserResult;
import Application.Managers.UserManager;
import Application.Models.Entites.BankAccount;
import Application.Models.Entites.User;
import Application.Models.Enums.HairColor;
import Application.Models.Enums.Sex;
import Application.Models.Utils.IdGenerator;
import Application.Services.UserService;
import Presentation.Interfaces.IMenu;
import DataAccess.BankAccountRepository;
import DataAccess.OperationRepository;
import DataAccess.UserRepository;

import java.util.Scanner;

public class Menu implements IMenu {

    private final IdGenerator userIdGenerator = new IdGenerator();
    private final IdGenerator bankAccountIdGenerator = new IdGenerator();
    private final UserService userService = new UserService(
            new UserRepository(),
            new BankAccountRepository(),
            new OperationRepository(),
            new UserManager());

    private final Scanner scanner = new Scanner(System.in);

    @Override
    public void Run() {
        while (true) {
            System.out.println("\n--- –ú–µ–Ω—é ---");
            System.out.println("1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
            System.out.println("3. –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("4. –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("5. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞");
            System.out.println("6. –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á–µ—Ç–∞");
            System.out.println("7. –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç");
            System.out.println("8. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏");
            System.out.println("0. –í—ã–π—Ç–∏");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1 -> createUser();
                case 2 -> getUserInfo();
                case 3 -> manageFriends();
                case 4 -> createBankAccount();
                case 5 -> checkBalance();
                case 6 -> withdraw();
                case 7 -> deposit();
                case 8 -> transfer();
                case 0 -> {
                    System.out.println("–í—ã—Ö–æ–¥...");
                    return;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!");
            }
        }
    }

    private void createUser() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ");
        String login = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
        String name = scanner.nextLine();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç: ");
        int age = scanner.nextInt();
        scanner.nextLine();

        // –í–≤–æ–¥ –ø–æ–ª–∞ —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä —Ü–∏—Ñ—Ä–æ–π
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:");
        System.out.println("1. –ú—É–∂—Å–∫–æ–π");
        System.out.println("2. –ñ–µ–Ω—Å–∫–∏–π");
        System.out.println("3. –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É (1-3): ");
        int sexChoice = scanner.nextInt();
        scanner.nextLine();

        Sex sex = switch (sexChoice) {
            case 1 -> Sex.Male;
            case 2 -> Sex.Female;
            default -> Sex.Undefined;
        };

        // –í–≤–æ–¥ —Ü–≤–µ—Ç–∞ –≤–æ–ª–æ—Å —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä —Ü–∏—Ñ—Ä–æ–π
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –≤–æ–ª–æ—Å:");
        System.out.println("1. –ë–ª–æ–Ω–¥");
        System.out.println("2. –ü–µ–ø–µ–ª—å–Ω—ã–π");
        System.out.println("3. –ö–∞—à—Ç–∞–Ω–æ–≤—ã–π");
        System.out.println("4. –†—ã–∂–∏–π");
        System.out.println("5. –ß–µ—Ä–Ω—ã–π");
        System.out.println("6. –û–∫—Ä–∞—à–µ–Ω–Ω—ã–π");
        System.out.println("7. –¶–≤–µ—Ç–Ω–æ–π");
        System.out.println("8. –°–µ–¥–æ–π");
        System.out.println("9. –ë–µ–ª—ã–π");
        System.out.println("10. –õ—ã—Å—ã–π");
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É (1-10): ");
        int hairChoice = scanner.nextInt();
        scanner.nextLine();

        HairColor hairColor = switch (hairChoice) {
            case 1 -> HairColor.Blond;
            case 2 -> HairColor.Ash;
            case 3 -> HairColor.Brown;
            case 4 -> HairColor.Auburn;
            case 5 -> HairColor.Black;
            case 6 -> HairColor.Dyed;
            case 7 -> HairColor.Colored;
            case 8 -> HairColor.Grey;
            case 9 -> HairColor.White;
            default -> HairColor.Bold;
        };

        User user = new User(userIdGenerator, login, name, age, sex, hairColor);
        UserResult result = userService.CreateUser(user);

        System.out.println(result instanceof UserResult.Success ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!" : "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }


    private void getUserInfo() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        int userId = scanner.nextInt();
        User user = userService.get_userRepository().FindUserById(userId);
        if (user != null) {
            userService.GetUserInfo(user);
        } else {
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }

    private void manageFriends() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        int userId = scanner.nextInt();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –¥—Ä—É–≥–∞: ");
        int friendId = scanner.nextInt();

        User user = userService.get_userRepository().FindUserById(userId);
        User friend = userService.get_userRepository().FindUserById(friendId);

        if (user != null && friend != null) {
            System.out.print("–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞ (1) –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å (2): ");
            int action = scanner.nextInt();

            if (action == 1) {
                userService.AddFriend(user, friend);
                System.out.println("–î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω.");
            } else if (action == 2) {
                userService.RemoveFriend(user, friend);
                System.out.println("–î—Ä—É–≥ —É–¥–∞–ª–µ–Ω.");
            } else {
                System.out.println("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }
        } else {
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –¥—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }

    private void createBankAccount() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        int userId = scanner.nextInt();

        User user = userService.get_userRepository().FindUserById(userId);
        if (user == null) {
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return; // üí• –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        }

        System.out.println("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + user.getName() + " (ID: " + user.getId() + ")");

        BankAccount account = new BankAccount(bankAccountIdGenerator, user);
        BankAccountResult result = userService.addBankAccount(user, account);

        if (result instanceof BankAccountResult.Success) {
            System.out.println("–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!");
        } else {
            System.out.println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞.");
        }
    }


    private void checkBalance() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Å—á–µ—Ç–∞: ");
        int accountId = scanner.nextInt();
        BankAccount account = userService.get_bankAccountRepository().FindBankAccountById(accountId);

        if (account != null) {
            User user = userService.get_userRepository().FindUserById(account.getUserId()); // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—á–µ—Ç–∞
            if (user != null) {
                userService.CheckBalance(user, account); // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            } else {
                System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        } else {
            System.out.println("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }


    private void withdraw() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Å—á–µ—Ç–∞: ");
        int accountId = scanner.nextInt();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω—è—Ç–∏—è: ");
        double amount = scanner.nextDouble();

        BankAccount account = userService.get_bankAccountRepository().FindBankAccountById(accountId);
        if (account != null) {
            OperationResult result = userService.Withdraw(account, amount);

            if (result instanceof OperationResult.Success) {
                System.out.println("–î–µ–Ω—å–≥–∏ —Å–Ω—è—Ç—ã.");
            } else if (result instanceof OperationResult.OperationError error) {
                System.out.println("–û—à–∏–±–∫–∞: " + error.getMessage());
            }
        } else {
            System.out.println("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }

    private void deposit() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Å—á–µ—Ç–∞: ");
        int accountId = scanner.nextInt();
        System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ");
        double amount = scanner.nextDouble();

        BankAccount account = userService.get_bankAccountRepository().FindBankAccountById(accountId);
        if (account != null) {
            OperationResult result = userService.Deposit(account, amount);
            if (result instanceof OperationResult.Success) {
                System.out.println("–°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.");
            } else if (result instanceof OperationResult.OperationError error) {
                System.out.println("–û—à–∏–±–∫–∞: " + error.getMessage());
            }
        } else {
            System.out.println("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }


    private void transfer() {
        try {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ");
            int fromId = Integer.parseInt(scanner.nextLine().trim());

            System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ");
            int toId = Integer.parseInt(scanner.nextLine().trim());

            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞: ");
            double amount = Double.parseDouble(scanner.nextLine().trim().replace(',', '.'));

            BankAccount fromAccount = userService.get_bankAccountRepository().FindBankAccountById(fromId);
            BankAccount toAccount = userService.get_bankAccountRepository().FindBankAccountById(toId);

            if (fromAccount != null && toAccount != null) {
                OperationResult result = userService.Transfer(fromAccount, toAccount, amount);
                if (result instanceof OperationResult.Success) {
                    System.out.println("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.");
                } else if (result instanceof OperationResult.OperationError error) {
                    System.out.println("–û—à–∏–±–∫–∞: " + error.getMessage());
                }
            } else {
                System.out.println("–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
            }
        } catch (NumberFormatException e) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.");
        }
    }
}
